/*
 * AlkAblak.java
 *
 * Created on 2005. április 17., 14:46
 */

package hu.wfs.vonalkod.gui.alkAblak;


import hu.wfs.vonalkod.gui.nevjegy.Nevjegy_dlg;
import hu.wfs.vonalkod.gui.oldalbeallitas.Oldalbeallitas_dlg;
import hu.wfs.vonalkod.konfiguracio.Konfiguracio;
import hu.wfs.vonalkod.modell.Nyomtatando;
import hu.wfs.vonalkod.modell.Oldalbeallitas;
import hu.wfs.vonalkod.nyomtatas.VonalkodNyomtato;
import hu.wfs.vonalkod.nyomtatas.VonalkodSeged;
import hu.wfs.vonalkod.shared.AllapotjelzoDialogus;
import hu.wfs.vonalkod.shared.SwingWorker;
import hu.wfs.vonalkod.shared.Utils;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.print.PrintService;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.sourceforge.barbecue.Barcode;


/**
 *
 * @author  Béci
 */
public class AlkAblak extends javax.swing.JFrame {
	
	private Nyomtatandok_Tbl tábla;
	private Oldalbeallitas oldalbeállítás;
	
	/** Creates new form AlkAblak */
	public AlkAblak() {
		initComponents();
		init_Konfiguráció();
		init_Tábla();
		init_Egyéb();
		init_szabványmenü();
		konfigurációsBetöltés_Oldalbeállítás();
		setMennyiségSzerkesztõ();
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				konfigurációMentése();
			}
		});
		init_NézõképTartó();
	}
	
	Nezokep nézõkép;
	
	private void init_NézõképTartó() {
		nézõkép=new Nezokep();
		nézõkép.setOpaque(false);
		nezokepTarto.add(nézõkép,BorderLayout.CENTER);
		repaint();
	}
	
	private void setMennyiségSzerkesztõ() {
		SpinnerNumberModel modell=new SpinnerNumberModel(
				new Integer(1),new Integer(1),new Integer(Integer.MAX_VALUE), new Integer(1));
		spin_ÚjMennyiség.setModel(modell);
	}	
	
	private void init_Konfiguráció() {
		try {
			Konfiguracio.inicializálás();
		} catch (Throwable kiv) {
			Utils.hibaÜzenet(this,"Sikertelen konfiguráció inicializálás!", kiv);
		}
	}
	
	String szabvány; 
	
	private void eseménykezelõ_SzabványKiválasztás(ActionEvent e) {
		szabvány=e.getActionCommand();
		Konfiguracio.getTulajdonságok().setProperty("vonalkodSzabvany", szabvány);
	}
	
	private String getAlapSzabvány() {
		return szabvány;
	}
	
	private void init_szabványmenü() {
		String[] szabvanyok=VonalkodSeged.getTámogatottSzabványok();
		ActionListener figyelõ=new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				eseménykezelõ_SzabványKiválasztás(e);
			}
		};
		String kiválasztandó=VonalkodSeged.ELSÕDLEGES_SZABVÁNY;
		String konfigSzabvany=
			Konfiguracio.getTulajdonságok().getProperty("vonalkodSzabvany");
		if (
			konfigSzabvany!=null&&
			Arrays.asList(szabvanyok).contains(konfigSzabvany))
			kiválasztandó=konfigSzabvany;
		for (int i=0;i<szabvanyok.length;i++) {
			String szabványnév=szabvanyok[i];
			JRadioButtonMenuItem rádiómenü=new JRadioButtonMenuItem(szabványnév);
			menu_Szabvány.add(rádiómenü);
			rádiómenü.setActionCommand(szabványnév);
			rádiómenü.addActionListener(figyelõ);
			bgrp_SzabványMenü.add(rádiómenü);
			if (szabványnév.equals(kiválasztandó)) {
				rádiómenü.setSelected(true);
				szabvány=kiválasztandó;
			}
		}
	}
	
	private void init_Egyéb() {
	}
	
	private void init_Tábla() {
		tábla=new Nyomtatandok_Tbl();
		görgPanel_Tábla.setViewportView(tábla.getTáblaKomponens());
		tábla.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				táblaSorKiválasztásBekövetkezett();
			}
		});
	}
	
	private void táblaSorKiválasztásBekövetkezett() {
		boolean érték=tábla.getKijelöltek().size()>=1;
		gmb_Törlés.setEnabled(érték);
		szdb_KijelöltekMennyisége.setEnabled(érték);
		gmb_KijelMennyOk.setEnabled(érték);
		gmb_KódolásMódosítás.setEnabled(érték);
		
		érték=tábla.getKijelöltek().size()==1;
		gmb_Módosítás.setEnabled(érték);
		if (tábla.getKijelöltek().size()==1) {
			Nyomtatando nyomt=(Nyomtatando)tábla.getKijelöltek().get(0);
			nézõkép.setVonalkód(nyomt.getVonalkód());			
		} else {
			nézõkép.setVonalkód(null);
		}
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        bgrp_SzabványMenü = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        gmb_Oldalbeállítás = new javax.swing.JButton();
        gmb_Nyomtatás = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        szdb_KódolandóSzöveg = new javax.swing.JTextField();
        spin_ÚjMennyiség = new javax.swing.JSpinner();
        gmb_ÚjOk = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        görgPanel_Tábla = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        gmb_Törlés = new javax.swing.JButton();
        gmb_Módosítás = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        szdb_KijelöltekMennyisége = new javax.swing.JTextField();
        gmb_KijelMennyOk = new javax.swing.JButton();
        gmb_KódolásMódosítás = new javax.swing.JButton();
        Hopszli = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        nezokepTarto = new javax.swing.JPanel();
        állapotjelzõNyomtatás = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem1 = new javax.swing.JMenuItem();
        menu_Szabvány = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WEBFocus St\u00fadi\u00f3 - Vonalk\u00f3dvar\u00e1zsl\u00f3");
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        jLabel4.setText("\u00daj karakterl\u00e1nc felv\u00e9tele:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 7, 0, 0);
        jPanel3.add(jPanel4, gridBagConstraints);

        jLabel1.setText("Karakterl\u00e1ncok");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanel3.add(jLabel1, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        gmb_Oldalbeállítás.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/oldalbeallias.png")));
        gmb_Oldalbeállítás.setText("Oldalbe\u00e1ll\u00edt\u00e1s");
        gmb_Oldalbeállítás.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gmb_Oldalbeállítás.setPreferredSize(new java.awt.Dimension(125, 28));
        gmb_Oldalbeállítás.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gmb_OldalbeállításActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(gmb_Oldalbeállítás, gridBagConstraints);

        gmb_Nyomtatás.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/print.png")));
        gmb_Nyomtatás.setText("Nyomtat\u00e1s");
        gmb_Nyomtatás.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gmb_Nyomtatás.setPreferredSize(new java.awt.Dimension(110, 28));
        gmb_Nyomtatás.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gmb_NyomtatásActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(gmb_Nyomtatás, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel3.add(jPanel5, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        szdb_KódolandóSzöveg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                szdb_KódolandóSzövegActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel6.add(szdb_KódolandóSzöveg, gridBagConstraints);

        spin_ÚjMennyiség.setPreferredSize(new java.awt.Dimension(50, 20));
        spin_ÚjMennyiség.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel6.add(spin_ÚjMennyiség, gridBagConstraints);

        gmb_ÚjOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/okKicsi.png")));
        gmb_ÚjOk.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gmb_ÚjOk.setPreferredSize(new java.awt.Dimension(20, 20));
        gmb_ÚjOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gmb_ÚjOkActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel6.add(gmb_ÚjOk, gridBagConstraints);

        jLabel2.setText("Sz\u00f6veg:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        jPanel6.add(jLabel2, gridBagConstraints);

        jLabel5.setText("db");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel6.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel3.add(jPanel6, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 9.0;
        gridBagConstraints.weighty = 9.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(görgPanel_Tábla, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html><p align=\"center\">Kijel\u00f6lt(ek)<br>mennyis\u00e9ge:</p></html>");
        jLabel3.setMaximumSize(new java.awt.Dimension(100, 30));
        jLabel3.setMinimumSize(new java.awt.Dimension(100, 30));
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 2);
        jPanel1.add(jLabel3, gridBagConstraints);

        gmb_Törlés.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/megsem.png")));
        gmb_Törlés.setText("T\u00f6rl\u00e9s");
        gmb_Törlés.setEnabled(false);
        gmb_Törlés.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gmb_Törlés.setMaximumSize(new java.awt.Dimension(100, 28));
        gmb_Törlés.setMinimumSize(new java.awt.Dimension(100, 28));
        gmb_Törlés.setOpaque(false);
        gmb_Törlés.setPreferredSize(new java.awt.Dimension(100, 28));
        gmb_Törlés.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gmb_TörlésActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 5, 2);
        jPanel1.add(gmb_Törlés, gridBagConstraints);

        gmb_Módosítás.setText("Sz\u00f6veg m\u00f3dos\u00edt\u00e1s");
        gmb_Módosítás.setEnabled(false);
        gmb_Módosítás.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gmb_Módosítás.setMaximumSize(new java.awt.Dimension(100, 28));
        gmb_Módosítás.setMinimumSize(new java.awt.Dimension(120, 28));
        gmb_Módosítás.setPreferredSize(new java.awt.Dimension(100, 28));
        gmb_Módosítás.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gmb_MódosításActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 5, 2);
        jPanel1.add(gmb_Módosítás, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setMaximumSize(new java.awt.Dimension(100, 25));
        jPanel2.setMinimumSize(new java.awt.Dimension(100, 25));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 25));
        szdb_KijelöltekMennyisége.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        szdb_KijelöltekMennyisége.setMaximumSize(new java.awt.Dimension(50, 20));
        szdb_KijelöltekMennyisége.setMinimumSize(new java.awt.Dimension(50, 20));
        szdb_KijelöltekMennyisége.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(szdb_KijelöltekMennyisége, gridBagConstraints);

        gmb_KijelMennyOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/okKicsi.png")));
        gmb_KijelMennyOk.setEnabled(false);
        gmb_KijelMennyOk.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gmb_KijelMennyOk.setPreferredSize(new java.awt.Dimension(20, 20));
        gmb_KijelMennyOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gmb_KijelMennyOkActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanel2.add(gmb_KijelMennyOk, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 2);
        jPanel1.add(jPanel2, gridBagConstraints);

        gmb_KódolásMódosítás.setText("K\u00f3dol\u00e1s m\u00f3dos\u00edt\u00e1s");
        gmb_KódolásMódosítás.setEnabled(false);
        gmb_KódolásMódosítás.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gmb_KódolásMódosítás.setMaximumSize(new java.awt.Dimension(110, 28));
        gmb_KódolásMódosítás.setMinimumSize(new java.awt.Dimension(110, 28));
        gmb_KódolásMódosítás.setOpaque(false);
        gmb_KódolásMódosítás.setPreferredSize(new java.awt.Dimension(110, 28));
        gmb_KódolásMódosítás.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gmb_KódolásMódosításActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 9.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 5, 2);
        jPanel1.add(gmb_KódolásMódosítás, gridBagConstraints);

        Hopszli.setLayout(new java.awt.BorderLayout());

        Hopszli.setMaximumSize(new java.awt.Dimension(10, 125));
        Hopszli.setMinimumSize(new java.awt.Dimension(10, 125));
        Hopszli.setPreferredSize(new java.awt.Dimension(10, 125));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));

        jLabel7.setText("N\u00e9z\u0151k\u00e9p:");
        jPanel7.add(jLabel7);

        Hopszli.add(jPanel7, java.awt.BorderLayout.NORTH);

        nezokepTarto.setLayout(new java.awt.BorderLayout());

        nezokepTarto.setBackground(new java.awt.Color(255, 255, 255));
        nezokepTarto.setBorder(new javax.swing.border.CompoundBorder(null, new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 4)));
        Hopszli.add(nezokepTarto, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 7, 5, 4);
        jPanel1.add(Hopszli, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel1, gridBagConstraints);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(állapotjelzõNyomtatás, java.awt.BorderLayout.SOUTH);

        jLabel6.setBackground(new java.awt.Color(106, 125, 136));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/JobbHatter.jpg")));
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153)));
        jLabel6.setOpaque(true);
        getContentPane().add(jLabel6, java.awt.BorderLayout.EAST);

        jMenu3.setText("Funkci\u00f3k");
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/jobbranyil.png")));
        jMenuItem3.setText("import\u00e1l\u00e1s");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItem3);

        jMenu3.add(jSeparator1);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/kilepes.png")));
        jMenuItem1.setText("Kil\u00e9p\u00e9s");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItem1);

        jMenuBar2.add(jMenu3);

        menu_Szabvány.setText("Szabv\u00e1ny");
        jMenuBar2.add(menu_Szabvány);

        jMenu4.setText("Seg\u00edts\u00e9g");
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/wfs/vonalkod/eroforrasok/info.png")));
        jMenuItem4.setText("N\u00e9vjegy");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });

        jMenu4.add(jMenuItem4);

        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-554)/2, (screenSize.height-514)/2, 554, 514);
    }//GEN-END:initComponents
	
	private String showSzabványválasztó(String kezdõSzabvány) {
		Object rst=JOptionPane.showInputDialog(
			this, 
			"Kérem válasszon kódolási szabványt!", 
			"Szabvány választó", 
			JOptionPane.PLAIN_MESSAGE, 
			null, 
			VonalkodSeged.getTámogatottSzabványok(), 
			kezdõSzabvány);
		return (String)rst;
	}
	
	private void gmb_KódolásMódosításActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gmb_KódolásMódosításActionPerformed
		List nyomtatandók=tábla.getKijelöltek();
		if (nyomtatandók.size()==0) return;	
		// Kezdõ szabvány választás
		String kezdõszabvány=getAlapSzabvány();
		if (nyomtatandók.size()==1)
			kezdõszabvány=
					((Nyomtatando)nyomtatandók.get(0)).getSzabvány();
		// Szabványválasztás
		String választottSzabvány=showSzabványválasztó(kezdõszabvány);
		if (választottSzabvány==null)
			return;
		
		// Az elemek beállítása a szabvány szerint
		Iterator itr=nyomtatandók.iterator();
		while(itr.hasNext()) {
			Nyomtatando nyomt=(Nyomtatando)itr.next();
			String kódolandó=nyomt.getKódolandóSzöveg();
			boolean aKódolásSikerült=false;
			String próbálkozásSzabvány=new String(választottSzabvány);
			do {
				try {
					Barcode vonalkód=VonalkodSeged.createBarcodeByNév(próbálkozásSzabvány, kódolandó);
					nyomt.setVonalkód(vonalkód);
					nyomt.setSzabvány(próbálkozásSzabvány);
					aKódolásSikerült=true;
				} catch (Throwable kiv) {
					Utils.hibaÜzenet(
						this,
						"Hiba! A szabvánnyal nem lehet kódolni a szöveget (\""+
						kódolandó+"\"), kérem válasszon másik szabványt!",
						kiv);
					String másikSzabvány=showSzabványválasztó(próbálkozásSzabvány);
					if (másikSzabvány==null) return;
					próbálkozásSzabvány=másikSzabvány;
					if (itr.hasNext()) {
						int rst=JOptionPane.showConfirmDialog(
							this, 
							"A továbbiakban is ezt a szabványt használjam?", 
							"Kérdés",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
						if (rst==JOptionPane.YES_OPTION) választottSzabvány=másikSzabvány;
					}
				}
			} while (aKódolásSikerült==false);
		}
		tábla.frissítés();
	}//GEN-LAST:event_gmb_KódolásMódosításActionPerformed

	private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
		karakterláncImportálás();
	}//GEN-LAST:event_jMenuItem3ActionPerformed

	private void karakterláncImportálás() {
		List beolvasottak=new ArrayList();
		String libStr=Konfiguracio.getTulajdonságok().getProperty("importTallozoLib");
		JFileChooser tallózó=new JFileChooser();		
		if (libStr!=null) {
			File lib=new File(libStr);
			if (lib.exists()&&lib.isDirectory())
				tallózó.setCurrentDirectory(lib);
		}
		tallózó.setDialogTitle("Megnyitás");
		int rst=tallózó.showOpenDialog(this);
		if (rst==JFileChooser.APPROVE_OPTION) {
			File fájl=tallózó.getSelectedFile();
			BufferedReader br=null;
			try {
				br=new BufferedReader(
					new InputStreamReader(new FileInputStream(fájl)));
				String sor;
				while((sor=br.readLine())!=null) {
					sor=sor.trim();
					if (sor==null||sor.equalsIgnoreCase(""))
						continue;
					if (sor.length()>100) {
						Utils.hibaÜzenet(this,"Hiba, az aktuális beolvasandó sor túl hosszú(max.:100 kar.)!");
						int rst2=JOptionPane.showConfirmDialog(
							this,
							"Folytatja a fájl feldolgozását?", 
							"Kérdés", JOptionPane.YES_NO_OPTION);
						if (rst2==JOptionPane.YES_OPTION)
							break;
					}
					beolvasottak.add(sor);
				}
				Konfiguracio.getTulajdonságok().setProperty("importTallozoLib",fájl.getParent());
			} catch (Throwable kiv) {
				Utils.hibaÜzenet(this,"Hiba az importáláskor!",kiv);
			} finally {
				try {
					if (br!=null);
					br.close();					
				} catch (Throwable kiv) {
					Utils.hibaÜzenet(this,"Hiba a fájlmûveletkor!",kiv);
				}
			}
		}
			
		

		// Szabványválasztás
		String választottSzabvány=getAlapSzabvány();
		
		// Az elemek beállítása a szabvány szerint
		Iterator itr=beolvasottak.iterator();
		while(itr.hasNext()) {
			String kódolandó=(String)itr.next();
			boolean aKódolásSikerült=false;
			String próbálkozásSzabvány=new String(választottSzabvány);
			do {
				try {
					Barcode vonalkód=VonalkodSeged.createBarcodeByNév(próbálkozásSzabvány, kódolandó);
					Nyomtatando nyomt=new Nyomtatando();
					nyomt.setKódolandóSzöveg(kódolandó);
					nyomt.setVonalkód(vonalkód);
					nyomt.setMennyiség(1);
					nyomt.setSzabvány(próbálkozásSzabvány);
					tábla.elemBeszúrás(nyomt);
					aKódolásSikerült=true;
				} catch (Throwable kiv) {
					Utils.hibaÜzenet(
						this,
						"Hiba! A szabvánnyal nem lehet kódolni a szöveget (\""+
						kódolandó+"\"), kérem válasszon másik szabványt!",
						kiv);
					String másikSzabvány=showSzabványválasztó(próbálkozásSzabvány);
					if (másikSzabvány==null) return;
					próbálkozásSzabvány=másikSzabvány;
					if (itr.hasNext()) {
						rst=JOptionPane.showConfirmDialog(
							this, 
							"A továbbiakban is ezt a szabványt használjam?", 
							"Kérdés",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
						if (rst==JOptionPane.YES_OPTION) választottSzabvány=másikSzabvány;
					}
				}
			} while (aKódolásSikerült==false);
		}
		tábla.frissítés();		
		
	}
	
	private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
		Nevjegy_dlg dlg=new Nevjegy_dlg(this, true);
		dlg.setLocationRelativeTo(this);
		dlg.show();
	}//GEN-LAST:event_jMenuItem4ActionPerformed

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
		int rst=JOptionPane.showConfirmDialog(this,"Valóban kilép a programból?", "Kérdés", JOptionPane.YES_NO_OPTION);
		if (rst==JOptionPane.YES_OPTION) {
			konfigurációMentése();
			System.exit(0);
		}
	}//GEN-LAST:event_jMenuItem1ActionPerformed

	private void konfigurációMentése() {
		try {
			Konfiguracio.mentés();			
		} catch (Throwable kiv) {
			Utils.hibaÜzenet(this,"Hiba a konfiguráció mentésekor!",kiv);
		}		
	}
		
	private void setÁllapotjelzõSzövegFromHosszúFolyamat(String _üzenet) {
		final String üzenet=_üzenet;
		SwingUtilities.invokeLater(new Runnable(){
			public void run() {
				állapotjelzõ.setSzöveg(üzenet);
			}
		});
	}
	
	
	private void gmb_NyomtatásActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gmb_NyomtatásActionPerformed
		nyomtatásKezdése();
	}//GEN-LAST:event_gmb_NyomtatásActionPerformed
	
	AllapotjelzoDialogus állapotjelzõ;

	private PrintService getPrinterByNév(String név, PrintService[] printerek) {
		if (név==null)  return null;
		for (int i=0;i<printerek.length;i++) {
			if (printerek[i].getName().equalsIgnoreCase(név))
				return printerek[i];
		}
		return null;
	}
	
	VonalkodNyomtato nyomtatóMenedzser;
	
	private void nyomtatásKezdése() {
		// Nyomtatandó elemek ellenõrzése
		if (tábla.getAdatok().size()==0) {
			Utils.hibaÜzenet(this,"Nincsenek nyomtatandó elemek!");
			szdb_KódolandóSzöveg.selectAll();
			szdb_KódolandóSzöveg.requestFocus();
			return;
		}
			
		// Oldalbeállítás ellenõrzése
		if (oldalbeállítás==null) {
			Utils.hibaÜzenet(this,"Nincsen megadva az oldalbeállítás!");
			gmb_Oldalbeállítás.doClick();
			return;
		}		
		
		PrinterJob job=PrinterJob.getPrinterJob();
		
		// Konfigurációs tulajdonság beállítása
		String printerNév=Konfiguracio.getTulajdonságok().getProperty("printerNev");
		PrintService printer=getPrinterByNév(printerNév,job.lookupPrintServices());
		if (printer!=null) {
			try {
				job.setPrintService(printer);
			} catch (Throwable kiv) {
				Utils.hibaÜzenet(this,"Hiba az alapértelmezett nyomtató beállításakor",kiv);
			}
		}
			
		// Nyomtató választás dialógus
		if (!job.printDialog()) {
			Utils.üzenet(this,"Megszakítota a nyomtatást!");
			return;
		}
		
		// Konfigurációs tulajdonság mentése
		Konfiguracio.getTulajdonságok().setProperty("printerNev",job.getPrintService().getName());
		try {
			Konfiguracio.mentés();			
		} catch (Throwable kiv) {
			Utils.hibaÜzenet(this,"Hiba a printer konfig. tulajdonság mentésekor!",kiv);
		}
		
		// Elemek átadása a nyomtatómenedzsernek
		List adatok=tábla.getAdatok();
		Nyomtatando[] nyomtatandók=
				(Nyomtatando[])adatok.toArray(new Nyomtatando[adatok.size()]);
		nyomtatóMenedzser=new VonalkodNyomtato(
			oldalbeállítás,
			nyomtatandók,
			job);

		// Hosszú folyamat elõkészítése
		SwingWorker sw=new SwingWorker() {
			Throwable kivétel;
			
			public Object construct() {
				try {
					nyomtatóMenedzser.nyomtatásKezdése();
				} catch (Throwable kiv) {
					kivétel=kiv;
				}
				return null;
			}
			
			public void finished() {
				if (kivétel!=null) {}
				setVezérlõkByNyomtatás(false);
			}
		};
		sw.start();
		setVezérlõkByNyomtatás(true);
	}
	
	private void setVezérlõkByNyomtatás(boolean isPrinting) {
		állapotjelzõNyomtatás.setIndeterminate(isPrinting);
		állapotjelzõNyomtatás.setStringPainted(isPrinting);
		állapotjelzõNyomtatás.setString("Nyomtatás folyamatban");
		gmb_Nyomtatás.setEnabled(!isPrinting);
	}
	
	public static final String KONFIG_FÁJL_OLDALBEÁLLÍTÁS="oldalBeallitas.bin";
	public static final String KONFIG_FÁJL_CÍMKEBEÁLLÍTÁS="cimkebeallitas.bin";
	
	private void konfigurációsMentés_Oldalbeállítás() {
		try {
			Konfiguracio.konfigurációsObjektumMentés(oldalbeállítás,KONFIG_FÁJL_OLDALBEÁLLÍTÁS);
		} catch (Throwable kiv) {
			Utils.hibaÜzenet(this,"Hiba az oldalbeállítás konfigurációs mentésekor!",kiv);
		}
	}
	
	private void konfigurációsBetöltés_Oldalbeállítás() {
		try {
			oldalbeállítás=(Oldalbeallitas)Konfiguracio.konfigurációsObjektumBetöltés(
					KONFIG_FÁJL_OLDALBEÁLLÍTÁS);
		} catch (Throwable kiv) {
			Utils.hibaÜzenet(this,"Hiba az odalbeállítás konfiguráció betöltésekor", kiv);
		}
	}
	
	private String getKiválasztottSzabvány() {
		return bgrp_SzabványMenü.getSelection().getActionCommand();
	}
	
	
	private void gmb_OldalbeállításActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gmb_OldalbeállításActionPerformed
		Oldalbeallitas_dlg dlg=new Oldalbeallitas_dlg(this,true);
		dlg.setLocationRelativeTo(this);
		if (oldalbeállítás!=null)
			dlg.setOldalbeállítás(oldalbeállítás);
		if (dlg.showDialógus()==dlg.BEZÁRÁSIOPCIÓ_OK) {
			oldalbeállítás=dlg.getOldalbeállítás();
			konfigurációsMentés_Oldalbeállítás();
		}
	}//GEN-LAST:event_gmb_OldalbeállításActionPerformed
	
	private void szdb_KódolandóSzövegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_szdb_KódolandóSzövegActionPerformed
		gmb_ÚjOk.doClick();
		szdb_KódolandóSzöveg.selectAll();
	}//GEN-LAST:event_szdb_KódolandóSzövegActionPerformed
	
	private void gmb_MódosításActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gmb_MódosításActionPerformed
		String szöveg=JOptionPane.showInputDialog(
			this,
			"Kérem adja meg az új karakterláncot!", 
			((Nyomtatando)tábla.getKiválasztott()).getKódolandóSzöveg());
		if (szöveg==null) return;
		if (szöveg.trim().equalsIgnoreCase("")) {
			Utils.hibaÜzenet(this,"Hiba, a szöveg üres!");
			return;
		}		
		szöveg=szöveg.trim();
		try {
			Nyomtatando kiválasztott=(Nyomtatando)tábla.getKiválasztott();
			Barcode vonalkód=VonalkodSeged.createBarcodeByNév(
				kiválasztott.getSzabvány(),szöveg);
			kiválasztott.setKódolandóSzöveg(szöveg);
			kiválasztott.setVonalkód(vonalkód);
			tábla.frissítés();			
		} catch (Throwable kiv) {
			Utils.hibaÜzenet(this,"Hiba! A szabvánnyal (menüben választva) nem lehet kódolni a szöveget!", kiv);
			return;
		}
	}//GEN-LAST:event_gmb_MódosításActionPerformed
	
	
	private void gmb_KijelMennyOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gmb_KijelMennyOkActionPerformed
		int mennyiség;
		try {
			mennyiség=Integer.parseInt(szdb_KijelöltekMennyisége.getText());
			if (mennyiség<=0) throw new Exception("Hibás érték!");
		} catch (Throwable kiv) {
			Utils.hibaÜzenet(this,"Hibás mennyiségérték!");
			return;
		}
		Iterator itr=tábla.getKijelöltek().iterator();
		while(itr.hasNext()) {
			Nyomtatando nyomt=(Nyomtatando)itr.next();
			nyomt.setMennyiség(mennyiség);
		}
		tábla.frissítés();
	}//GEN-LAST:event_gmb_KijelMennyOkActionPerformed
	
	private void gmb_TörlésActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gmb_TörlésActionPerformed
		if (JOptionPane.showConfirmDialog(
				this,
				"Valóban törli a kijelölteket?", 
				"Kérdés", 
				JOptionPane.YES_NO_OPTION, 
				JOptionPane.QUESTION_MESSAGE
			)!=
				JOptionPane.OK_OPTION)
			return;
		tábla.kijelöltekTörlése();
	}//GEN-LAST:event_gmb_TörlésActionPerformed
	
	private void gmb_ÚjOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gmb_ÚjOkActionPerformed
		String szöveg=szdb_KódolandóSzöveg.getText();
		if (szöveg==null||szöveg.trim().equalsIgnoreCase("")) {
			Utils.hibaÜzenet(this,"Hiba, a szöveg üres!");
			return;
		}
		szöveg=szöveg.trim();
		Nyomtatando nyomt=new Nyomtatando();
		try {
			Barcode vonalkód=VonalkodSeged.createBarcodeByNév(getAlapSzabvány(),szöveg);
			nyomt.setKódolandóSzöveg(szöveg);
			nyomt.setMennyiség(((Integer)spin_ÚjMennyiség.getValue()).intValue());
			nyomt.setVonalkód(vonalkód);
			nyomt.setSzabvány(getAlapSzabvány());
			tábla.elemBeszúrás(nyomt);				
		} catch (Throwable kiv) {
			Utils.hibaÜzenet(this,"Hiba a szöveg felvételekor! Próbálkozzon másik szabvánnyal!",kiv);
			return;
		}
	}//GEN-LAST:event_gmb_ÚjOkActionPerformed
	
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new AlkAblak().setVisible(true);
			}
		});
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Hopszli;
    private javax.swing.ButtonGroup bgrp_SzabványMenü;
    private javax.swing.JButton gmb_KijelMennyOk;
    private javax.swing.JButton gmb_KódolásMódosítás;
    private javax.swing.JButton gmb_Módosítás;
    private javax.swing.JButton gmb_Nyomtatás;
    private javax.swing.JButton gmb_Oldalbeállítás;
    private javax.swing.JButton gmb_Törlés;
    private javax.swing.JButton gmb_ÚjOk;
    private javax.swing.JScrollPane görgPanel_Tábla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenu menu_Szabvány;
    private javax.swing.JPanel nezokepTarto;
    private javax.swing.JSpinner spin_ÚjMennyiség;
    private javax.swing.JTextField szdb_KijelöltekMennyisége;
    private javax.swing.JTextField szdb_KódolandóSzöveg;
    private javax.swing.JProgressBar állapotjelzõNyomtatás;
    // End of variables declaration//GEN-END:variables
	
}
